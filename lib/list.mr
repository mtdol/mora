data List a := 
      Cons ({lgetVal, lsetVal} :: a) ({lgetNext, lsetNext} :: List a)
    | Null
;

op : := Cons;

fn null v {return v = Null;}

fn head v {return
    if null v then 
        error "`head`: Cannot deref Null."
    else
        lgetVal v
;}

fn tail v {return
    if null v then 
        error "`tail`: Cannot deref Null."
    else
        lgetNext v
;}

fn lprint xs {
    Case xs {
        x:xs -> {print x; put " : "; lprint xs;}
        Null -> {put "Null";}
    }
}

fn lfilter f xs {return
    case xs {
        x:xs -> if f x then x : lfilter f xs else lfilter f xs;
        Null -> Null;
    }
;}
