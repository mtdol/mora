{-
Mora Prelude
Matthew Dolinka 2021
-}

module excluding () {
    op ++   append;
    op +++  lappend;
    op :    Cons;
    op .    compose;
}

data Maybe a := 
      Yes ({getMaybe} :: a)  
    | No
;
data Either a b := 
      Left ({getLeft} :: a) 
    | Right ({getRight} :: b)
;

-- generic heap reference
data Box a := Box ({unbox,setbox} :: a);

type String := Array Char;

dec otherwise <- True;

-- id :: a -> a;
fn id a -> a;
fn const y _ -> y;
fn flip f x y -> f y x;

--not :: Bool -> Bool;
fn not b -> if b then False else True;

--xor :: Bool -> Bool -> Bool;
fn xor b1 b2 -> b1 /= b2;

--
--- Basic Math
--

fn odd n -> n % 2 = 1;
dec even <- not . odd
fn add1 n -> n+1;
fn sub1 n -> n-1;
fn add n1 n2 -> n1 + n2;
fn fadd n1 n2 -> n1 +. n2;
fn sub n1 n2 -> n1 - n2;
fn fsub n1 n2 -> n1 -. n2;
fn div n1 n2 -> n1 / n2;
fn fdiv n1 n2 -> n1 /. n2;
fn mul n1 n2 -> n1 * n2;
fn fmul n1 n2 -> n1 *. n2;
fn pow n1 n2 -> n1 ** n2;
fn fpow n1 n2 -> n1 **. n2;
fn negate n -> -n;
fn pos n -> n > 0;
fn neg n -> n < 0;
fn zero n -> n = 0;
fn abs n -> if n > 0 then n else -n;

fn ceil f -> floor f + 1;
fn round f {
    dec ff <- intToFloat $ floor f;
    dec fc <- intToFloat $ ceil f;
    dec dif1 <- f -. ff;
    dec dif2 <- fc -. f;
    return if dif1 >= dif2 then ceil f else floor f;
}

fn max n1 n2 -> if n1 >= n2 then n1 else n2;
fn min n1 n2 -> if n1 <= n2 then n1 else n2;

fn maxAll ns -> foldl' max ns;
fn minAll ns -> foldl' min ns;

fn eq v1 v2 -> v1 = v2;
dec neq <- not `compose2` eq;

fn arrayEq cmp x y {
    dec i <- 0;
    If length x /= length y {return False;}
    While i /= length x {
        If not $ (x ! i) `cmp` (y ! i) {return False;}
        i +< 1;
    }
    return True;
}

dec arrayEqEq <- arrayEq eq;
dec stringEq <- arrayEqEq;

fn compose f1 f2 x -> f1 $ f2 x;
fn compose2 f1 f2 x y -> f1 $ f2 x y;

--inRange :: (Int,Int) -> Int;
fn inRange r x -> x >= fst r && x < snd r;

-- singleton :: a -> Array a;
fn singleton x -> [x];

-- in place map
--map :: (a -> b) -> Array a -> Void;
fn map f a {
    dec i;
    i <- 0;

    While i /= length a {
        a ! i <- f (a ! i);
        i +< 1;
    }
}

-- map and generate a new array
-- "generative" map
--map :: (a -> b) -> Array a -> Array b;
fn gmap f a {
    dec i, ret;
    i <- 0;
    ret <- Array $ length a;

    While i /= length a {
        ret ! i <- f (a ! i);
        i +< 1;
    }

    return ret;
}

-- applies a function to an array without explicitly modifying it.
-- "void" map
--vmap :: (a -> b) -> Array a -> Void;
fn vmap f a {
    dec i;
    i <- 0;

    While i /= length a {
        f $ a ! i;
        i +< 1;
    }
}

fn index a i -> a ! i;
fn setArray a i v {a ! i <- v;}

--append :: Array a -> Array a -> Array a;
fn append a1 a2 {
    dec ret, i;
    ret <- Array $ length a1 + length a2;
    i <- 0;

    While i /= length a1 {
        ret ! i <- a1 ! i;
        i     +< 1;
    }

    While i /= length ret {
        ret ! i <- a2 ! (i - length a1);
        i     +< 1;
    }

    return ret;
}

-- appends an array of arrays into a single array
fn appendAll as {
    dec lret <- Null;
    dec i <- length as - 1;
    dec j;

    While i /= -1 {
        j <- length (as ! i) - 1;
        While j /= -1 {
            lret <- (as ! i ! j) : lret;
            j -< 1;
        }
        i -< 1;
    }

    return listToArray lret;
}

--filter :: (a -> Bool) -> Array a -> Array a;
fn filter f a {
    dec ret, i, reti, ret2;
    ret     <- Array $ length a;
    i       <- 0;
    reti    <- 0;

    While i /= length a {
        If f $ a ! i {
            ret ! reti <- a ! i;
            reti     +< 1;
        }
        i +< 1;
    }

    -- shrink array
    i <- 0;
    ret2 <- Array reti;
    While i /= reti {ret2 ! i <- ret ! i; i +< 1;}

    return ret2;
}

fn elem e a {
    dec i <- 0;

    While i /= length a {
        If a ! i = e {return True;}
        i +< 1;
    }

    return False;
}

-- lookup :: (a -> a -> Bool) -> a -> Array (a,b) -> Maybe b;
fn lookup cmp key es {
    dec i <- 0;

    While i /= length es {
        If key `cmp` (fst $ es ! i) {return Yes $ snd $ es ! i;}
        i +< 1;
    }

    return No;
}

fn lookupEq key es -> lookup eq key es;

--slice :: Array a -> (Int, Int) -> Array a
fn slice a is {
    dec ret, reti, i1, i2;
    i1 <- fst is;
    i2 <- snd is;
    reti <- 0;

    If i1 > i2 || i2 - i1 > length a {
        error $ "Invalid range for slice: [" 
            ++ show i1 ++ " " ++ show i2 ++ ")";
    }
    ret <- Array $ i2 - i1;
    
    While i1 /= i2 {
        ret ! reti <- a ! i1;
        reti  +< 1;
        i1 +< 1;
    }

    return ret;
}

-- zip :: Array a -> Array b -> Array (a,b)
fn zip xs ys {
    dec l <- min (length xs) (length ys);
    dec ret <- Array l;
    dec i <- 0;

    While i /= l {
        ret ! i <- (xs ! i, ys ! i);
        i +< 1;
    }

    return ret;
}

fn zip3 xs ys zs {
    dec l <- minAll [length xs, length ys, length zs];
    dec ret <- Array l;
    dec i <- 0;

    While i /= l {
        ret ! i <- (xs ! i, ys ! i, zs ! i);
        i +< 1;
    }

    return ret;
}

fn foldr f acc xs {
    dec i <- length xs - 1;
    While i /= -1 {
        acc <- f (xs ! i) acc;
        i -< 1;
    }

    return acc;
}

fn foldl f acc xs {
    dec i <- 0;
    While i /= length xs {
        acc <- f (xs ! i) acc;
        i +< 1;
    }

    return acc;
}

-- starts with the first list elem
fn foldl' f xs {
    If length xs = 0 {error "foldl': Empty array.";}

    dec i <- 1;
    dec acc <- xs ! 0;

    While i /= length xs {
        acc <- f (xs ! i) acc;
        i +< 1;
    }

    return acc;
}

fn take n xs {
    n <- min (max n 0) (length xs);
    return slice xs (0,n);
}

fn drop n xs {
    n <- max 0 $ min n $ length xs;
    return slice xs (n,length xs);
}

-- and :: Array Bool -> Bool
fn and xs {
    dec i <- 0;
    While i /= length xs {
        If not $ xs ! i {return False;}
        i +< 1;
    }
    return True;
}

fn or xs {
    dec i <- 0;
    While i /= length xs {
        If xs ! i {return True;}
        i +< 1;
    }
    return False;
}

-- all :: (a -> Bool) -> Array a -> Bool
fn all f xs -> and $ gmap f xs;
fn any f xs -> or $ gmap f xs;

dec sum <- foldl add 0;
dec product <- foldl mul 1;

--
-- Strings
--

--toUpper :: String -> String;
fn toUpper s ->
    \c -> (
        if inRange (97,122) (ord c) then
            chr $ ord c - 32
        else c
    ) `gmap` s
;

fn whitespace c -> or [c = ' ', c = '\t', c = '\n'];

fn trim s {
    dec i <- 0;
    dec start <- 0;
    dec stop <- length s - 1;
    dec cont <- True;

    While cont && i /= length s {
        If not $ whitespace $ s ! i  {
            cont <- False;
            start <- i;
        }
        i +< 1;
    }

    If whitespace $ s ! start {return "";}

    cont <- True;
    i <- length s - 1;
    While cont && i >= start {
        If not $ whitespace $ s ! i {
            cont <- False;
            stop <- i;
        }
        i -< 1;
    }

    return s `slice` (start,stop+1);
}


--
-- IO
--

-- prints strings
fn put s {putChar `vmap` s;}
fn putLn s {putChar `vmap` s; putChar '\n';}

fn printInt i -> putLn $ showInt i;
fn printChar c -> putLn $ showChar c;
fn printFloat f -> putLn $ showFloat f;
fn printString s -> putLn $ showString s;
fn printBool b -> putLn $ showBool b;

fn printArray f s -> putLn $ showArray f s;
fn printIntArray s -> putLn $ showArray showInt s;
fn printCharArray s -> putLn $ showArray showChar s;
fn printBoolArray s -> putLn $ showArray showBool s;
fn printFloatArray s -> putLn $ showArray showFloat s;

fn printtp2 fs tp  -> putLn $ showtp2 fs tp;
fn printtp3 fs tp  -> putLn $ showtp3 fs tp;
fn printtp4 fs tp  -> putLn $ showtp4 fs tp;
fn printtp5 fs tp  -> putLn $ showtp5 fs tp;
fn printtp6 fs tp  -> putLn $ showtp6 fs tp;
fn printtp7 fs tp  -> putLn $ showtp7 fs tp;
fn printtp8 fs tp  -> putLn $ showtp8 fs tp;
fn printtp9 fs tp  -> putLn $ showtp9 fs tp;
fn printtp10 fs tp -> putLn $ showtp10 fs tp;
fn printtp11 fs tp -> putLn $ showtp11 fs tp;
fn printtp12 fs tp -> putLn $ showtp12 fs tp;
fn printtp13 fs tp -> putLn $ showtp13 fs tp;
fn printtp14 fs tp -> putLn $ showtp14 fs tp;
fn printtp15 fs tp -> putLn $ showtp15 fs tp;

fn showChar c -> "'" ++ [c] ++ "'";

fn showBool b -> if b then "True" else "False";

fn showInt n {
    -- converts the raw number into its char form, 3 -> '3'
    fn convert i -> chr $ i + 48;
    
    If n = 0 {return "0";}

    -- remember if was negative
    dec sign <- neg n;
    dec lret <- Null;
    dec d <- 0;
    n <- abs n;

    While n /= 0 {
        d <- n % 10;
        n /< 10;
        lret <- convert d : lret;
    }
    
    If sign {lret <- '-' : lret;}
    return listToArray lret;
}

fn showString s -> appendAll ["\"", s,"\""];

-- showArray :: (a -> String) -> Array a -> String;
fn showArray f a {
    If length a = 0 {return "[]";}

    -- compute all of the elems of the array
    dec as <- f `gmap` a;
    -- `as'` is a list of strings that will eventually be merged together
    --                             ", "             "[" "]"
    dec as' <- Array $ length as + (length as - 1) + 1 + 1;
    as' ! 0 <- "[";
    as' ! (length as' - 1) <- "]";

    dec i <- 1;
    dec asi <- 0;
    dec cont <- True;
    While cont && i < length as' - 1 {
        If asi = length as - 1 {
            as' ! i <- as ! asi;
            cont <- False;
        } Else {
            as' ! i <- as ! asi;
            as' ! (i+1) <- ", ";

            i +< 2;
            asi +< 1;
        }
    }

    -- merge into one string
    return appendAll as';
}

fn showtp2 f tp -> case (tp,f) {
    ((a1,a2),
    (f1,f2)) -> 
        appendAll ["(", f1 a1, ", ", f2 a2, ")"]
    ;
};

fn showtp3 f tp -> case (tp,f) {
    ((a1,a2,a3),
    (f1,f2,f3))-> 
        appendAll ["(", f1 a1, ", ", f2 a2, ", ", f3 a3, ")"]
    ;
};

fn showtp4 f tp -> case (tp,f) {
    ((a1,a2,a3,a4),
    (f1,f2,f3,f4)) -> 
        appendAll ["(", f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ")"]
    ;
};

fn showtp5 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5),
    (f1,f2,f3,f4,f5)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5
        ,")"]
    ;
};
fn showtp6 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6),
    (f1,f2,f3,f4,f5,f6)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6
        ,")"]
    ;
};

fn showtp7 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7),
    (f1,f2,f3,f4,f5,f6,f7)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7
        ,")"]
    ;
};

fn showtp8 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8),
    (f1,f2,f3,f4,f5,f6,f7,f8)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8
        ,")"]
    ;
};

fn showtp9 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8,a9),
    (f1,f2,f3,f4,f5,f6,f7,f8,f9)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8, ", ", f9 a9
        ,")"]
    ;
};

fn showtp10 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8,a9,a10),
    (f1,f2,f3,f4,f5,f6,f7,f8,f9,f10)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8, ", ", f9 a9, ", ", f10 a10
        ,")"]
    ;
};

fn showtp11 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11),
    (f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8, ", ", f9 a9, ", ", f10 a10, ", ", f11 a11
        ,")"]
    ;
};

fn showtp12 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12),
    (f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8, ", ", f9 a9, ", ", f10 a10, ", ", f11 a11, ", ",
        f12 a12
        ,")"]
    ;
};

fn showtp13 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13),
    (f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8, ", ", f9 a9, ", ", f10 a10, ", ", f11 a11, ", ",
        f12 a12, ", ", f13 a13
        ,")"]
    ;
};

fn showtp14 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14),
    (f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8, ", ", f9 a9, ", ", f10 a10, ", ", f11 a11, ", ",
        f12 a12, ", ", f13 a13, ", ", f14 a14
        ,")"]
    ;
};

fn showtp15 f tp -> case (tp,f) {
    ((a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15),
    (f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15)) -> 
        appendAll ["(",
        f1 a1, ", ", f2 a2, ", ", f3 a3, ", ", f4 a4, ", ", f5 a5, ", ", f6 a6, ", ",
        f7 a7, ", ", f8 a8, ", ", f9 a9, ", ", f10 a10, ", ", f11 a11, ", ",
        f12 a12, ", ", f13 a13, ", ", f14 a14, ", ", f15 a15
        ,")"]
    ;
};

-- readInt :: String -> Maybe Int;
fn readInt s {
    fn handleSign s {
        dec s' <- trim s;
        If length s' /= 0 && s' ! 0 = '-' {
            return (trim $ drop 1 s', True);
        }
        return (s',False);
    }

    dec tp <- handleSign s;
    dec s' <- fst tp;
    dec sign <- snd tp;
    dec i  <- length s' - 1;
    dec j  <- 0;
    dec n  <- 0;
    dec c  <- 0;

    -- [48,57]
    While i /= -1 {
        c <- ord $ s' ! i;
        If c > 57 || c < 48 {
            return No;
        } Else {
            c <- c - 48;
            n <- n + (10**j * c);

        }

        i -< 1;
        j +< 1;
    }

    If sign {n <- negate n;}

    return Yes n;
}

fn readChar s {
    dec s' <- trim s;
    If length s' /= 3 {return No;}
    If s' ! 0 /= '\'' {return No;}
    If s' ! 2 /= '\'' {return No;}
    return Yes $ s' ! 1;
}

fn readString s {
    dec s' <- trim s;
    If length s' < 2 {return No;}
    If length s' = 2 {return Yes "";}
    If s' ! 0 /= '\"' {return No;}
    If s' ! (length s' - 1) /= '\"' {return No;}
    return Yes $ s' `slice` (1,length s' - 1);

}

fn readBool s {
    dec s' <- trim s;
    If "True" `stringEq` s' {return Yes True;}
    If "False" `stringEq` s' {return Yes False;}
    return No;
}

--
--- Structures, Tuples
--

fn fst tp -> case tp {
    (x,_) -> x;
};

fn snd tp -> case tp {
    (_,y) -> y;
};

-- uncurry :: (a -> b -> c) -> (a, b) -> c;
fn uncurry f xy ->
    f (fst xy) (snd xy)
;

-- curry :: ((a, b) -> c) -> a -> b -> c;
fn curry f x y ->
    f (x,y)
;


--
-- List
-- 

data List a := 
      Cons ({lgetVal, lsetVal} :: a) ({lgetNext, lsetNext} :: List a)
    | Null
;


fn null v -> v = Null;

--lsingleton :: a -> List a;
fn lsingleton x -> Cons x Null;

fn head v ->
    if null v then 
        error "`head`: Cannot deref Null."
    else
        lgetVal v
;

fn tail v ->
    if null v then 
        error "`tail`: Cannot deref Null."
    else
        lgetNext v
;

fn last xs -> case xs {
    Null -> error "`last`: Cannot deref Null.";
    x:Null -> x;
    _:xs -> last xs;
};

fn maybeHead xs -> case xs {
    Null -> No;
    x:_ -> Yes x;
};

fn maybeTail xs -> case xs {
    Null -> No;
    _:xs -> Yes xs;
};

fn maybeLast xs -> case xs {
    Null -> No;
    x:Null -> Yes x;
    _:xs -> maybeLast xs;
};

fn lindex xs i -> case xs {
    Null -> error "lindex: Index out of bounds.";
    x:xs -> if i = 0 then x else lindex xs (i-1);
};

--lappend :: List a -> List a -> List a;
fn lappend xs ys ->
    -- `,` is tuple constructor
    -- `case` is an expression, `Case` is a statement
    case (xs, ys) {
        (Null, ys) -> 
            ys;
        ((x:xs), ys) ->
            Cons x (xs `lappend` ys);
    }
;

fn lfilter f xs -> case xs {
        x:xs -> if f x then x : lfilter f xs else lfilter f xs;
        Null -> Null;
};

fn lelem e xs -> case xs {
    Null -> False;
    x:xs -> if x = e then True else lelem e xs;
};

-- llookup :: (a -> a -> Bool) -> a -> List (a,b) -> Maybe b;
fn llookup cmp key xs -> case xs {
    (x,v):xs -> if key `cmp` x then Yes v else llookup cmp key xs;
    Null -> No;
};

fn llookupEq key xs -> llookup eq key xs;

--lreverse :: List a -> List a;
fn lreverse xs {
    fn aux xs acc ->
        case xs {
            Null -> acc;
            x:xs -> aux xs (x:acc);
        }
    ;

    return aux xs Null;
}

-- generative map
--lgmap :: (a -> b) -> List a -> List b;
fn lgmap f xs ->
    case xs {
        Null -> Null;
        x:xs -> f x : f `lgmap` xs;
    }
;

-- in-place map
--lmap :: (a -> b) -> List a -> Void;
fn lmap f xs {
    Case xs {
        Null -> {}
        xs_@x:xs -> {
            lsetVal xs_ $ f x;
            lmap f xs;
        }
    }
}

-- void map
--lvmap :: (a -> b) -> List a -> Void;
fn lvmap f xs {
    Case xs {
        Null -> {}
        x:xs -> {f x; f `lvmap` xs;}
    }
}

fn lfoldl f acc xs -> case xs {
    Null -> acc;
    x:xs -> lfoldl f (f x acc) xs;
};

fn lfoldl' f xs -> case xs {
    Null -> error "lfoldl': Null.";
    x:xs -> lfoldl f x xs;
};

{-
-- might not be the most optimal
fn lfoldr f acc xs -> case xs {
    Null -> acc;
    x:xs -> f x (lfoldr f acc xs);
};
-}

fn lfoldr f acc xs {
    xs <- lreverse xs;
    return lfoldl f acc xs;
}

fn lzip xs ys -> case (xs,ys) {
    (Null,_) -> Null;
    (_,Null) -> Null;
    ((x:xs),(y:ys)) -> (x,y) : lzip xs ys;
};

fn lzip3 xs ys zs -> case (xs,ys,zs) {
    (Null,_,_) -> Null;
    (_,Null,_) -> Null;
    (_,_,Null) -> Null;
    ((x:xs),(y:ys),(z:zs)) -> (x,y,z) : lzip3 xs ys zs;
};

fn land xs -> case xs {
    Null -> True;
    x:xs -> x && land xs;
};

fn lor xs -> case xs {
    Null -> False;
    x:xs -> x || land xs;
};

fn lall f xs -> land $ lgmap f xs;
fn lany f xs -> lor $ lgmap f xs;

dec lsum <- lfoldl add 0;
dec lproduct <- lfoldl mul 1;

dec llength <- lfoldl (\_ acc -> acc+1) 0;

fn leq cmp xs ys -> case (xs,ys) {
    (Null, Null) -> True;
    (x:xs,y:ys) -> x `cmp` y && leq cmp xs ys;
    _ -> False;
};

dec leqEq <- leq eq; 

fn arrayToList a {
    dec i <- length a - 1;
    dec ret <- Null;

    While i /= -1 {
        ret <- a ! i : ret;
        i -< 1;
    }

    return ret;
}

fn listToArray xs {
    dec ret <- Array $ llength xs;
    dec i <- 0;

    While xs /= Null {
        ret ! i <- head xs;
        i +< 1;
        xs <- tail xs;
    }

    return ret;
}

-- Show a list
fn showList f xs {
    fn aux f xs -> case xs {
        x:Null -> f x : "])" : Null;
        x:xs -> f x : ", " : aux f xs;
        Null -> "])" : Null;
    };

    return appendAll $ listToArray $ "([" : aux f xs;
}

fn printList f xs {putLn $ showList f xs;}
dec printIntList <- printList showInt;
dec printFloatList <- printList showFloat;
dec printCharList <- printList showChar;
dec printBoolList <- printList showBool;
