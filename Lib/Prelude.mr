module excluding () {
    import List;
    
    op @   := printLn;
    op ++  := append;
    op &&  := and;
    op ||  := or;
    op ^^  := xor;
}

data Maybe a := 
      Yes ({getMaybe} :: a)  
    | No
;
data Either a b := 
      Left ({getLeft} :: a) 
    | Right ({getRight} :: b)
;

-- generic heap reference
data Box a := Box ({unbox,setbox} :: a);

-- data Bool       := True | False; 

type String     := Array Char;



-- id :: a -> a;
fn id a {return a;}

--not :: Bool -> Bool;
fn not b {return if b then False else True;}
--and :: Bool -> Bool -> Bool;
fn and b1 b2 {return if b1 then (if b2 then True else False) else False;}
--or :: Bool -> Bool -> Bool;
fn or b1 b2 {return if b1 then True else (if b2 then True else False);}
--xor :: Bool -> Bool -> Bool;
fn xor b1 b2 {return b1 /= b2;}

--
--- Basic Math
--

fn odd n {return n % 2 = 1;}
fn even n {return n % 2 = 0;}
fn add1 n {return n+1;}
fn sub1 n {return n-1;}

fn max n1 n2 {return if n1 >= n2 then n1 else n2;}
fn min n1 n2 {return if n1 <= n2 then n1 else n2;}

--inRange :: (Int,Int) -> Int;
fn inRange r x {return x >= fst r && x < snd r;}

-- in place map
--map :: (a -> b) -> Array a -> Void;
fn map f a {
    dec i;
    i <- 0;

    While (i /= length a) {
        a ! i <- f (a ! i);
        i +< 1;
    }
}

-- map and generate a new array
-- "generative" map
--map :: (a -> b) -> Array a -> Array b;
fn gmap f a {
    dec i, ret;
    i <- 0;
    ret <- Array $ length a;

    While i /= length a {
        ret ! i <- f (a ! i);
        i +< 1;
    }

    return ret;
}

-- applies a function to an array without modifying it.
-- "void" map
--vmap :: (a -> b) -> Array a -> Void;
fn vmap f a {
    dec i;
    i <- 0;

    While i /= length a {
        f $ a ! i;
        i +< 1;
    }
}

--append :: Array a -> Array a -> Array a;
fn append a1 a2 {
    dec ret, i;
    ret <- Array $ length a1 + length a2;
    i <- 0;

    While i /= length a1 {
        ret ! i <- a1 ! i;
        i     +< 1;
    }

    While i /= length ret {
        ret ! i <- a2 ! (i - length a1);
        i     +< 1;
    }

    return ret;
}

--filter :: (a -> Bool) -> Array a -> Array a;
fn filter f a {
    dec ret, i, reti, ret2;
    ret     <- Array $ length a;
    i       <- 0;
    reti    <- 0;

    While i /= length a {
        If f $ a ! i {
            ret ! reti <- a ! i;
            reti     +< 1;
        }
        i +< 1;
    }

    -- shrink array
    i <- 0;
    ret2 <- Array reti;
    While i /= reti {ret2 ! i <- ret ! i; i +< 1;}

    return ret2;
}

--slice :: Array a -> (Int, Int) -> Array a
fn slice a is {
    dec ret, reti, i1, i2;
    i1 <- fst is;
    i2 <- snd is;
    reti <- 0;

    If i1 > i2 || i2 - i1 > length a {
        error $ "Invalid range for slice: [" 
            ++ show i1 ++ " " ++ show i2 ++ ")";
    }
    ret <- Array $ i2 - i1;
    
    While i1 /= i2 {
        ret ! reti <- a ! i1;
        reti  +< 1;
        i1 +< 1;
    }

    return ret;
}

-- zip :: Array a -> Array b -> Array (a,b)
fn zip xs ys {
    dec l <- min (length xs) (length ys);
    dec ret <- Array l;
    dec i <- 0;

    While i /= l {
        ret ! i <- (xs ! i, ys ! i);
        i +< 1;
    }

    return ret;
}

--
--- Strings
--

--toUpper :: String -> String;
fn toUpper s {return
    \c {return
        if inRange (97,122) (ord c) then
            chr $ ord c - 32
        else c
    ;} `gmap` s
;}



--
--- IO
--

-- TODO: might go away, basically for testing
fn retPrint v {printLn v; return v;}

--print :: a -> Void;
fn print v {printChar `vmap` show v;}
--printLn :: a -> Void;
fn printLn v {print v; printChar '\n';}

fn put s {printChar `vmap` s;}
fn putLn s {printChar `vmap` s; printChar '\n';}


-- Works, but is very literal.
-- Chokes on trailing whitespace and negative sign.
-- readInt :: String -> Maybe Int;
fn readInt s {
    dec i <- length s - 1;
    dec j <- 0;
    dec n <- 0;
    dec c <- 0;

    -- [48,57]
    While i /= -1 {
        c <- ord $ s ! i;
        If c > 57 || c < 48 {
            return No;
        } Else {
            c <- c - 48;
            n <- n + (10**j * c);

        }

        i -< 1;
        j +< 1;
    }

    return Yes n;
}

--
--- Structures, Tuples
--

fn fst tp {return
    case tp {
        (x,_) -> x;
    }
;}

fn snd tp {return
    case tp {
        (_,y) -> y;
    }
;}

-- uncurry :: (a -> b -> c) -> (a, b) -> c;
fn uncurry f xy {return
    f (fst xy) (snd xy)
;}

-- curry :: ((a, b) -> c) -> a -> b -> c;
fn curry f x y {return
    f (x,y)
;}
