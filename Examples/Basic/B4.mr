fn sub x y -> x - y;

fn _map f xs {
    dec i;
    i <- 0;

    While i /= length xs {
        xs ! i <- f $ xs ! i;
        i +< 1;
    }
}

fn main {
    dec add1, vs;
    add1 <- \x -> x + 1;
    
    printInt $ 5 `sub` 3;
    printInt $ add1 6;

    vs <- [1,2,3];
    printArray showInt $ vs;

    -- map in place using lambda
    _map add1 vs;
    printArray showInt $ vs;
    
    -- we do a little currying
    _map (sub 2) vs;
    printArray showInt $ vs;

    -- directly pass in a lambda
    _map (\x {return sub x 3;}) vs;
    printArray showInt $ vs;

    -- calls the nullary lambda, receives `sub 3`, applies 4
    printInt $ (\ {return sub 3;})() 4; -- prints "-1"

    return 0;
}
