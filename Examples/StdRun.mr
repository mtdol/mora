-- tests various common-sense features
fn main args {
    assert leqEq ([1,3,5]) $ lfilter odd ([1,2,3,4,5]);

    assert eq 3 $ llength ([1,2,3]);
    assert eq 1 $ llength ([1]);
    assert eq 0 $ llength ([]);

    assert leqEq ([2,3,4]) $ add1 `lgmap` ([1,2,3]);

    dec v;
    v <- if length args = 0 then No else Yes $ args ! 0;
    
    dec t;
    Case v {
        Yes s -> {t <- "Yes args: " ++ show s;}
        No -> {t <- "No args";}
    }
    putLn t; t <- "";

    assert eq 1 $ fst (1,2);
    assert eq 2 $ snd (1,2);

    assert eq (-1) $ case [1,2,3] {
        [x,y,3] -> x-y; 
    };

    assert stringEq "baabc" $ case "abc" {
        a@[x,y,'c'] -> [y,x] `append` a; 
    };

    assert stringEq "cabc" $ case "abc" {
        s@"aba" -> ['a'] ++ s;
        s@"abb" -> ['b'] ++ s;
        s@"abc" -> ['c'] ++ s;
        s@"abd" -> ['d'] ++ s;
    };

    dec xs;
    xs <- ([1,2,3]);
    -- changes `1:2:3:Null` to `1:2:4:Null`
    lsetVal (lgetNext $ lgetNext xs) 4; 
    assert leqEq ([1,2,4]) $ xs;

    assert eq (-1) $ case ([1,2,3]) {
        ([2,x,y]) -> x + y;
        ([1,x,y]) -> x - y;
    };

    -- changes `1:2:4:Null` to `1:2:5:Null`
    Case xs {
        1:2:x -> {lsetVal x 5;}
    }
    assert leqEq ([1,2,5]) $ xs;

    assert eq 4 $ 
        foldr (\x acc -> acc - x) 10 [1,2,3];
    assert eq 4 $ 
        foldl (\x acc -> acc - x) 10 [1,2,3];

    assert stringEq "efcdab" $ 
        foldr (\x acc -> acc++x) "" ["ab","cd","ef"]; 
    assert stringEq "abcdef" $ 
        foldl (\x acc -> acc++x) "" ["ab","cd","ef"]; 

    assert eq 4 $ 
        lfoldr (\x acc -> acc - x) 10 ([1,2,3]);
    assert eq 4 $ 
        lfoldl (\x acc -> acc - x) 10 ([1,2,3]);

    assert stringEq "efcdab" $ 
        lfoldr (\x acc -> acc++x) "" (["ab","cd","ef"]); 
    assert stringEq "abcdef" $ 
        lfoldl (\x acc -> acc++x) "" (["ab","cd","ef"]); 
    
    assert eq 3 $ 
        foldl' sub [4,2,1];
    assert eq 3 $ 
        lfoldl' sub $ ([4,2,1]);
    
    dec x1 <- 2;
    assert eq 1 $ cond {
        x1 = 3 -> x1 + 1;
        otherwise -> x1 - 1;
    };

    dec x2 <- 3;
    assert eq 4 $ cond {
        x2 = 3 -> x2 + 1;
        otherwise -> x2 - 1;
    };

    x1 <- 2;
    Cond {
        x1 = 3 -> {x1 +< 1;}
        otherwise -> {x1 -< 1;}
    };
    assert eq 1 $ x1;

    x2 <- 3;
    Cond {
        x2 = 3 -> {x2 +< 1;}
        otherwise -> {x2 -< 1;}
    };
    assert eq 4 $ x2;

    return 0;
}

fn assert cmp v1 v2 {
    If v1 `cmp` v2 {
        putLn $ "Good";
    } Else {putLn $ "Bad";}
}
